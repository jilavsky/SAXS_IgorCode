#pragma rtGlobals=2		// Use modern global access method.Proc Layout_Corner_Labels_Style_()	Add_Corner_Labels_To_Layout()EndProc Add_Corner_Labels_To_Layout() : LayoutStyle	PauseUpdate; Silent 1		// modifying window...	Textbox/C/N=stamp0/F=0/A=RB/X=0.1/Y=0.1 "\\Z06\\{\"%s %s\",date(), time()}"	Textbox/C/N=stamp1/F=0/A=LB/X=0.1/Y=0.1 "\\Z06\\{\"%s\",CornerStamp1_()}"+":"+WinName(0, 1)EndMacroFunction/S CornerStamp1_()	PathInfo home			// creates String s_path	return S_path+IgorInfo(1)EndProc Add_Corner_Labels_To_Graph() : GraphStyle	AddCornerLabelsToGraph()EndMacroFunction AddCornerLabelsToGraph()	GetWindow kwTopWin , psize	Variable pLeft=V_left,pRight=V_right,pBottom=V_bottom,pwidth,pheight	pwidth = V_right-V_left	pheight = V_bottom-V_top	GetWindow kwTopWin , gsize	Variable gRight=V_right,gBottom=V_bottom	Variable leftEdge, rightEdge, bottom	leftEdge = -floor(100*pLeft/pwidth)	rightEdge = -floor(100*(gRight-pRight)/pwidth)	bottom = -floor(100*(gBottom-pBottom)/pheight)	Textbox/C/N=stamp0/F=0/A=RB/X=(rightEdge)/Y=(bottom) "\\Z06\\{\"%s %s\",date(), time()}"	Textbox/C/N=stamp1/F=0/A=LB/X=(leftEdge)/Y=(bottom) "\\Z06\\{\"%s\",CornerStamp1_()}"+":"+WinName(0, 1)	SetWindow kwTopWin, hook(GraphLabelHook)=GraphLablesHook, hookevents=0EndFunction GraphLablesHook (H_Struct)	STRUCT WMWinHookStruct &H_Struct	Variable event = H_Struct.eventCode	if (event!=6)				// skip all but resize events		return 0	endif	AddCornerLabelsToGraph()	return 1End//  ============================================================================  ////  ============================== Start of String Ranges ==============================  //Function NextInRange(range,last)	// given a string like "2-5,7,9-12,50" get the next number in this compound range									// the range is assumed to be monotonic, it returns NaN if no more values	String range					// list defining the range	Variable last					// last number obtained from this range, use -Inf to get start of range, it returns the next	// find first item in the list that should use next	String item	Variable m,i,j	Variable first						// first value in an item	do		item = StringFromList(j,range,",")		first = str2num(item)		// do we need to check for NaN in first?		if (numtype(first))			return NaN		elseif (last<first)				// skipping to the next item			return first		endif		// if last>=first, check to see if item is a '2-5' type range		m=-1							// remove any leading white space from item		do			m += 1		while (char2num(item[m])<=32)		item = item[m,strlen(item)-1]		i = strsearch(item,"-",1)		// location of first '-' after the first character		if (i<0)							// only a single number, not a dash type range, keep looking			j += 1			continue		endif		// check to see if last was in the range of item, but not the last value		if (last>=str2num(item) && last<str2num(item[i+1,Inf]))			return last+1		endif		j += 1	while(strlen(item)>0)	return NaNEnd//Function TestNextInRange(range)//	String range//	range = SelectString(strlen(range) ,"-16,-7--3,-1-2,5,50-54,99",range)//	Variable i = -Inf//	printf "for range = {%s},   ", range//	do//		i = NextInRange(range,i)//		if (numtype(i))//			break//		endif//		printf "%d  ", i//	while (!numtype(i))//	print ""//EndFunction ItemsInRange(range)	// given a string like "2-5,7,9-12,50" get the total number of values in the range	String range				// list defining the range								// the range is assumed to be monotonic, it returns NaN on error	String item							// each of the comma sepated items	Variable len=0						// the result, number of values represented	Variable m,i,j,N=ItemsInList(range,",")	for (j=0;j<N;j+=1)				// loop over each item		item = StringFromList(j,range,",")		m=-1							// remove any leading white space from item		do			m += 1		while (char2num(item[m])<=32)		item = item[m,strlen(item)-1]		i = strsearch(item,"-",1)		// location of first '-' after the first character		if (i<0)							// only a single number, not a dash type range, keep looking			len += 1		else								// item is a dash type			len += str2num(item[i+1,Inf])-str2num(item)+1		endif	endfor	return lenEnd//	print ItemsInRange("-16,-7--3,-1-2,5,50-54,99")//  17//	print ItemsInRange("1-5")//  5Function/T expandRange(range,sep)	// expand a string like "2-5,7,9-12,50" to "2,3,4,5,7,9,10,11,12,50"	String range					// series of numberseparated by commas and dashes, white is space igaored	String sep						// separates final list, usually ";"	if (strlen(sep)<1)				// sep defaults to ';'		sep = ";"	endif	Variable i1,i2,i	String str,out=""	Variable N=ItemsInList(range,",")	if (N<1)		return ""	endif	Variable j=0	do		str = StringFromList(j, range, ",")		Variable m=-1				// remove any leading white space		do			m += 1		while (char2num(str[m])<=32)		str = str[m,strlen(str)-1]		// now check str to see if it is a range like "20-23"		i1 = str2num(str)		i = strsearch(str,"-",strlen(num2str(i1)))		// position of "-" after first number		if (i>0)			i2 = str2num(str[i+1,inf])			i = i1			do				out += num2str(i)+sep				i += 1			while (i<=i2)		else			out += num2str(i1)+sep		endif		j += 1	while (j<N)	i = strlen(out)-1	if (char2num(out[i])==char2num(sep))		out = out[0,i-1]	endif	return outEnd// This is the inverse of expandRange()Function/T compressRange(range,sep) 	// take a range like "1;2;3;4;5;9;10;11" to "1-5,9-11"	String range	String sep							// sep is the separator used, will be replaced with commas and dashes	String comp=""						// the compressed string	String num	Variable j,first,last,i=0	Variable N=ItemsInList(range,sep)	if (N<1)		return ""	endif	last = str2num(StringFromList(0,range,sep))-2	// ensure that first item is at the start	for (i=0;i<N;i+=1)		j = str2num(StringFromList(i,range,sep))		num = num2str(j)		if (numtype(j))			return ""		elseif ((j-last)==1)					// keep counting			last = j		elseif ((j-last)!=1)					// new sub-range			if (i==0)							// special for first point				comp = num			elseif (first==last)					// just add a single number range				comp += ","+num			else									// close out previous range, and add single number				comp += "-"+num2str(last)+","+num			endif			last = j			first = j		endif	endfor	if (first!=last)		comp += "-"+num2str(last)	endif	return compEnd//Function test_compressRange()//	String range//	range = "//	printf "'%s' ---> '%s'\r",range, compressRange(range,";")//	range = "1;2;3;4;5;9;10;11"//	printf "'%s' ---> '%s'\r",range, compressRange(range,";")//	range = "4"//	printf "'%s' ---> '%s'\r",range, compressRange(range,";")//	range = "4;7"//	printf "'%s' ---> '%s'\r",range, compressRange(range,";")//	range = "-10;-9;-8;-7;-6;-5;-3;-2;-1;0;1;2;7;9;22"//	printf "'%s' ---> '%s'\r",range, compressRange(range,";")//End//  =============================== End of String Ranges ==============================  ////  ============================================================================  ////  ============================================================================  ////  ============================== Start of Wave Printing =============================  //Function printWave(w)			// print a wave (vector or matrix) to history	Wave w	if (!WaveExists(w))		DoAlert 0, "in 'printWave', wave does not exist"		return 1	endif	if (DimSize(w, 1)<=1)		// for vectors		printvec(w)	elseif (DimSize(w, 2)==0)	// for 2-d matrix		return printmat(w)	else		print "cannot yet handle dimensions 3 or 4"	endif	return 0EndStatic Function printvec(w)		// print a vector to screen	Wave w	String name=NameOfWave(w)	Wave/T tw=$GetWavesDataFolder(w,2)	Wave/C cw=$GetWavesDataFolder(w,2)	Variable waveIsComplex = WaveType(w) %& 0x01	Variable numeric = (WaveType(w)!=0)	Variable i=0, n, maxPrint=20	n = numpnts(w)	maxPrint = min(n,maxPrint)	printf "%s = {", name	do		if (waveIsComplex)						// a complex wave			printf "(%g, %g)", real(cw[i]),imag(cw[i])		endif		if (numeric %& (!waveIsComplex))		// a simple number wave			printf "%g", w[i]		endif		if (!numeric)							// a text wave			printf "\"%s\"", tw[i]		endif		if (i<(n-1))			printf ",  "		endif		i += 1	while (i<maxPrint)	if (n>maxPrint)		printf "...}\ronly printed %d of %d values\r",maxPrint,n	else		printf "}\r"	endifEndStatic Function printmat(m)	Wave m	if (DimSize(m, 1)==0 || DimSize(m,2)!=0)	// for 2-d matrix only		DoAlert 0, "Can only print 2-d matricies with printmat"		return 1	endif	String name=NameOfWave(m)	Wave/C mc=$GetWavesDataFolder(m,2)	if (DimSize(m, 0)==2 && DimSize(m, 1)==2)		if (WaveType(m) %& 0x01)					// true for complex numbers			print name+"[0][0] =",mc[0][0],";    ",name+"[0][1] =",mc[0][1]			print name+"[1][0] =",mc[1][0],";    ",name+"[1][1] =",mc[1][1]		else			print name+"[0][0] =",m[0][0],";    ",name+"[0][1] =",m[0][1]			print name+"[1][0] =",m[1][0],";    ",name+"[1][1] =",m[1][1]		endif	elseif (DimSize(m, 0)>=3 && DimSize(m, 1)==2)		if (WaveType(m) %& 0x01)					// true for complex numbers			print name+"[0][0] =",mc[0][0],";    ",name+"[0][1] =",mc[0][1]			print name+"[1][0] =",mc[1][0],";    ",name+"[1][1] =",mc[1][1]			print name+"[2][0] =",mc[2][0],";    ",name+"[2][1] =",mc[2][1]		else			print name+"[0][0] =",m[0][0],";    ",name+"[0][1] =",m[0][1]			print name+"[1][0] =",m[1][0],";    ",name+"[1][1] =",m[1][1]			print name+"[2][0] =",m[2][0],";    ",name+"[2][1] =",m[2][1]		endif	elseif (DimSize(m, 0)==2 && DimSize(m, 1)>=3)		if (WaveType(m) %& 0x01)					// true for complex numbers			print name+"[0][0] =",mc[0][0],";    ",name+"[0][1] =",mc[0][1],";    ",name+"[0][2] =",mc[0][1]			print name+"[1][0] =",mc[1][0],";    ",name+"[1][1] =",mc[1][1],";    ",name+"[1][2] =",mc[1][1]		else			print name+"[0][0] =",m[0][0],";    ",name+"[0][1] =",m[0][1],";    ",name+"[0][2] =",m[0][2]			print name+"[1][0] =",m[1][0],";    ",name+"[1][1] =",m[1][1],";    ",name+"[1][2] =",m[1][2]		endif	else		if (WaveType(m) %& 0x01)					// true for complex numbers			print name+"[0][0] =",mc[0][0],";    ",name+"[0][1] =",mc[0][1],";    ",name+"[0][2] =",mc[0][1]			print name+"[1][0] =",mc[1][0],";    ",name+"[1][1] =",mc[1][1],";    ",name+"[1][2] =",mc[1][1]			print name+"[2][0] =",mc[2][0],";    ",name+"[2][1] =",mc[2][1],";    ",name+"[2][2] =",mc[2][1]		else			print name+"[0][0] =",m[0][0],";    ",name+"[0][1] =",m[0][1],";    ",name+"[0][2] =",m[0][2]			print name+"[1][0] =",m[1][0],";    ",name+"[1][1] =",m[1][1],";    ",name+"[1][2] =",m[1][2]			print name+"[2][0] =",m[2][0],";    ",name+"[2][1] =",m[2][1],";    ",name+"[2][2] =",m[2][2]		endif	endif	if (DimSize(m,0)>3 || DimSize(m,1)>3)		printf "Only printed part of the (%d x %d) matrix\r",DimSize(m,0),DimSize(m,1)	endif	return 0End//  =============================== End of Wave Printing ==============================  ////  ============================================================================  //Function compareWaves(a,b)	WAVE a,b	Variable n=numpnts(a)	Variable i	if (n!=numpnts(b))		return 0	endif	do		if (numtype(a[i]))			if (numtype(a[i])!=numtype(b[i]))				return 0			endif		elseif (a[i]!=b[i])			return 0		endif		i += 1	while (i<n)	return 1EndFunction monotonic(a)	// determines whether values of a particular wave are monotonic (if any NaN, returns false)	Wave a		// the wave	if (strlen(NameOfWave(a))<1)		Abort "wave not found"	endif	Variable n=numpnts(a)	Variable i=1	do		if (a[i-1]>a[i])			return 0		endif		i += 1	while (i<n)	return 1EndFunction/T num2sexigesmal(seconds,places)	// convert seconds into a hh:mm:ss.sss   string	Variable seconds	Variable places	Variable minutes, hours, sec	Variable addMinus = (seconds<0)	String str, fmt, sfrac	seconds = abs(seconds)	hours = trunc(seconds/3600.)		// number of hours (signed)	seconds = mod(seconds,3600.)		// remove the hours	minutes = trunc(seconds/60.)	seconds = mod(seconds,60.)			// remove the minutes	sec = trunc(seconds)	sprintf fmt "%%.%df",places	sprintf sfrac fmt, seconds-sec	sfrac = sfrac[1,inf]					// remove the leading zero	sprintf str "%02d:%02d:%02d%s",hours,minutes,seconds,sfrac	if (addMinus)		str = "-"+str	endif	return strEnd